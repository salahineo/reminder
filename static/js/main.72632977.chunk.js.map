{"version":3,"sources":["actions/actionTypes.js","reducers/root.js","actions/addAction.js","actions/removeAction.js","actions/clearAllAction.js","components/App/App.js","index.js"],"names":["ADD_REMINDER","REMOVE_REMINDER","CLEAR_REMINDERS","root","state","action","read_cookie","type","lastID","length","id","note","date","bake_cookie","filter","reminder","addAction","removeAction","clearAllAction","App","this","props","reminders","className","map","moment","Date","fromNow","onClick","triggerAlert","setState","message","document","querySelector","innerHTML","src","alt","onSubmit","e","preventDefault","placeholder","value","onChange","target","selected","showTimeSelect","timeFormat","timeIntervals","timeCaption","dateFormat","placeholderText","validateInput","Reminders","React","Component","connect","dispatch","store","createStore","ReactDom","render","getElementById"],"mappings":"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","file":"static/js/main.72632977.chunk.js","sourcesContent":["// Add Reminder Action Type\nexport const ADD_REMINDER = \"ADD_REMINDER\";\n\n// Remove Reminder Action Type\nexport const REMOVE_REMINDER = \"REMOVE_REMINDER\";\n\n// Clear All Reminders Action Type\nexport const CLEAR_REMINDERS = \"CLEAR_REMINDERS\";\n","// Action Types\nimport {ADD_REMINDER, CLEAR_REMINDERS, REMOVE_REMINDER} from \"../actions/actionTypes\";\n\n// sfcookies Library\nimport {bake_cookie, read_cookie} from \"sfcookies\";\n\n// Root Reducer\nconst root = (state, action) => {\n  // Read Reminders From Cookies (If There Is No Value It Will Store As An Empty Array)\n  state = read_cookie(\"tasks_reminder\");\n  // Check Add Action\n  if (action.type === ADD_REMINDER) {\n    // Set LastID to 0 (If State Empty)\n    let lastID = 0;\n    // If State Have Objects\n    if (state.length !== 0) {\n      // Get Last Id Of State\n      lastID = state[state.length - 1].id;\n    }\n    // Append New Reminder To State\n    state = [...state, {id: (lastID + 1), note: action.note, date: action.date}];\n    // Save State To Cookies\n    bake_cookie(\"tasks_reminder\", state);\n    // Return State\n    return state;\n  } else if (action.type === REMOVE_REMINDER) {\n    // Filter Removed Reminder From Array\n    state = state.filter(reminder => reminder.id !== action.id);\n    // Save State To Cookies\n    bake_cookie(\"tasks_reminder\", state);\n    // Return State\n    return state;\n  } else if (action.type === CLEAR_REMINDERS) {\n    // Empty State\n    state = [];\n    // Save State To Cookies\n    bake_cookie(\"tasks_reminder\", state);\n    // Return State\n    return state;\n  }\n  // Return State\n  return state;\n};\n\n// Export Reducer\nexport default root;\n","// Action Types\nimport {ADD_REMINDER} from \"./actionTypes\";\n\n// Add Action Creator Function\nconst addAction = (note, date) => {\n  // Return Action\n  return {\n    type: ADD_REMINDER,\n    note: note,\n    date: date\n  };\n};\n\nexport default addAction\n","// Get Remove Action Type\nimport {REMOVE_REMINDER} from \"./actionTypes\";\n\nconst removeAction = (id) => {\n  return {\n    type: REMOVE_REMINDER,\n    id: id\n  };\n};\n\nexport default removeAction;\n","// Get Action Type\nimport {CLEAR_REMINDERS} from \"./actionTypes\";\n\nconst clearAllAction = () => {\n  return {\n    type: CLEAR_REMINDERS\n  };\n};\n\nexport default clearAllAction;\n","// Libraries\nimport React from \"react\";\nimport {connect} from \"react-redux\";\nimport moment from \"moment\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\n\n// Action Creators\nimport addAction from \"../../actions/addAction\";\nimport removeAction from \"../../actions/removeAction\";\nimport clearAllAction from \"../../actions/clearAllAction\";\n\nclass App extends React.Component {\n  // Local State To Store Input Values\n  state = {\n    note: \"\",\n    date: \"\"\n  };\n\n  Reminders() {\n    // Check If There Are Reminders Exist\n    if (this.props.reminders.length) {\n      return (\n        <div className=\"app-reminders\">\n          <ul className=\"list-group\">\n            {\n              this.props.reminders.map((reminder) => {\n                return (\n                  <li key={reminder.id} className=\"list-group-item d-flex justify-content-between align-items-center\">\n                    <div className=\"reminder d-flex flex-column\">\n                      <span className=\"note\">{reminder.note}</span>\n                      <span className=\"date\">{moment(new Date(reminder.date)).fromNow()}</span>\n                    </div>\n                    <div className=\"control\">\n                      <span className=\"close bg-danger\"\n                            onClick={() => this.props.removeAction(reminder.id)}>&times;</span>\n                    </div>\n                  </li>\n                );\n              })\n            }\n          </ul>\n          <button className=\"btn btn-danger btn-block\"\n                  onClick={() => this.props.clearAllAction()}>\n            Clear All Reminders\n          </button>\n        </div>\n      );\n    } else {\n      return (\n        <div className=\"app-reminders\">\n          <p className=\"no-reminders\">No Reminders Yet !!</p>\n        </div>\n      );\n    }\n  }\n\n  validateInput(note, date) {\n    if (note === \"\" || date === \"\") {\n      // Show Error Message\n      this.triggerAlert(\"All Inputs Are Required\", \"danger\");\n    } else {\n      // Send Data To Save It In App State\n      this.props.addAction(note, date);\n      // Clear Local Component State (Input Values)\n      this.setState({\n        note: \"\",\n        date: \"\"\n      });\n    }\n  }\n\n  triggerAlert(message, state) {\n    // Set Alert Message\n    document.querySelector(\".alert-container\").innerHTML = `<div class=\"alert alert-${state} alert-dismissible\">\n        <button class=\"close\" onclick=\"document.querySelector('.alert-container').innerHTML = ''\">&times;</button>\n        ${message}\n      </div>`;\n  }\n\n  // View\n  render() {\n    return (\n      <div className=\"app\">\n        <div className=\"app-image\">\n          <img className=\"img-fluid\" src=\"./images/app.png\" alt=\"App\" />\n        </div>\n        <div className=\"app-title\">\n          <h2>Tasks Reminder</h2>\n        </div>\n        <div className=\"alert-container\">\n\n        </div>\n        <div className=\"app-input\">\n          <form onSubmit={(e) => e.preventDefault()}>\n            <input className=\"form-control\"\n                   type=\"text\"\n                   placeholder=\"What do you want to do?\"\n                   value={this.state.note}\n                   onChange={(e) => this.setState({note: e.target.value})} />\n            <DatePicker\n              className=\"form-control\"\n              selected={this.state.date}\n              value={this.state.date}\n              onChange={(date) => this.setState({date: date})}\n              showTimeSelect\n              timeFormat=\"HH:mm aa\"\n              timeIntervals={15}\n              timeCaption=\"Time\"\n              dateFormat=\"MMMM d, yyyy h:mm aa\"\n              placeholderText=\"When do you want to make it?\"\n            />\n            <button className=\"btn btn-primary btn-block\"\n                    onClick={() => this.validateInput(this.state.note, this.state.date)}>\n              Add Reminder\n            </button>\n          </form>\n          {this.Reminders()}\n        </div>\n      </div>\n    );\n  }\n}\n\n// Get State Function\nconst mapStateToProps = (state) => {\n    return {\n      reminders: state\n    };\n  }\n;\n\n// Trigger Action To State Function\nconst mapDispatchToProps = (dispatch) => {\n    return {\n      addAction: (note, date) => dispatch(addAction(note, date)),\n      removeAction: (id) => dispatch(removeAction(id)),\n      clearAllAction: () => dispatch(clearAllAction())\n    };\n  }\n;\n\n// Export App\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// Libraries\nimport React from \"react\";\nimport ReactDom from \"react-dom\";\nimport {createStore} from \"redux\";\nimport {Provider} from \"react-redux\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\n// Reducers\nimport root from \"./reducers/root\";\n\n// CSS\nimport \"./index.css\";\n\n// Components\nimport App from \"./components/App/App\";\n\n// Create Store\nconst store = createStore(root);\n\nReactDom.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}